# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LTaf9Wd7HYwF15AK2tPrGk97XvzAiFpy
"""

!pip install deepface

from deepface import DeepFace
import cv2
import os
import numpy as np
# Step 1: Load and detect all faces in the target image
target_image_path = "test1.jpg"
detector_backend = "retinaface"

# Detect all faces
detected_faces = DeepFace.extract_faces(
    img_path=target_image_path,
    detector_backend=detector_backend,
    enforce_detection=False,
    align=True
)

# Step 2: Loop through detected faces and compare to database
db_path = "face_db/"
model_name = "MtCnn"
results = []

detected_faces

for i, face in enumerate(detected_faces):
    face_img_rgb = face["face"]
    temp_path = f"temp_face_{i}.jpg"
    # Fix data type
    if face_img_rgb.dtype != np.uint8:
        face_img_rgb = (face_img_rgb * 255).astype(np.uint8)

    face_img_bgr = cv2.cvtColor(face_img_rgb, cv2.COLOR_RGB2BGR)
    cv2.imwrite(temp_path, face_img_bgr)

    # Find best match for this face in the database
    df = DeepFace.find(
        img_path=temp_path,
        db_path=db_path,
        model_name=model_name,
        detector_backend=detector_backend,
        enforce_detection=False
    )[0]

    if not df.empty:
        top_match = df.iloc[0]
        results.append({
            "face_index": i,
            "identity": os.path.basename(os.path.dirname(top_match["identity"])),
            "distance": top_match["distance"]
        })
    else:
        results.append({
            "face_index": i,
            "identity": "Unknown",
            "distance": None
        })

    #os.remove(temp_path)

# Step 3: Show results
for res in results:
    print(f"Face #{res['face_index']} matched with: {res['identity']} (distance: {res['distance']})")